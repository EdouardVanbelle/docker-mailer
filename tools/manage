#!/bin/bash

STD_CMD="domain-list|user-list|remap|status"
DOMAIN_CMD="domain-add|domain-del|domain-check|dkim-get-selector"
USER_CMD="user-add|user-del|user-password"

usage() 
{
	echo $0 "<$STD_CMD|$DOMAIN_CMD|$USER_CMD>"
	exit 1
}

domain-list()
{
	cat /etc/postfix/virtual-mailbox-domains
}

dkim-add()
{
	DOMAIN=$1
	DKIM_SELECTOR=default

	# dkim
	mkdir /etc/opendkim/keys/$DOMAIN

	opendkim-genkey --selector $SELECTOR -domain $DOMAIN --directory /etc/opendkim/keys/$DOMAIN
	chown opendkim:opendkim /etc/opendkim/keys/$DOMAIN/$SELECTOR.private
	chmod 600 /etc/opendkim/keys/$DOMAIN/$SELECTOR.private
	chmod 644 /etc/opendkim/keys/$DOMAIN/$SELECTOR.txt

	echo "$SELECTOR._domainkey.$DOMAIN $DOMAIN:mail:/etc/opendkim/keys/$DOMAIN/$SELECTOR.private" >> /etc/opendkim/KeyTable
	echo "*@$DOMAIN $SELECTOR._domainkey.$DOMAIN" >>/etc/opendkim/SigningTable

	# don't know if important
	service opendkim reload 2>/dev/null >/dev/null

	echo "don't forget to add DKIM key in your zone: "
	cat /etc/opendkim/keys/$DOMAIN/$DKIM_SELECTOR.txt

}

dkim-get-selector()
{
	DOMAIN=$1

	awk '{ if( $1 == "'"*@$DOMAIN"'") { print $2; } }' </etc/opendkim/SigningTable | cut -d . -f 1
}


domain-add() 
{
	DOMAIN=$1


	if grep -q -- "$DOMAIN$" /etc/postfix/virtual-mailbox-domains
	then
		echo domain already exists >&2
		exit 1
	fi

	echo $DOMAIN >> /etc/postfix/virtual-mailbox-domains

	dkim-add $DOMAIN default

	echo $DOMAIN added
}

domain-del()
{
	DOMAIN=$1

	if ! grep -q -- "^$DOMAIN$" /etc/postfix/virtual-mailbox-domains
	then
		echo domain not in list >&2
	fi

	grep -v -- "^$DOMAIN$" /etc/postfix/virtual-mailbox-domains > /etc/postfix/virtual-mailbox-domains.tmp
	mv /etc/postfix/virtual-mailbox-domains.tmp /etc/postfix/virtual-mailbox-domains

	echo $DOMAIN removed
}

domain-check() 
{
	DOMAIN=$1

	SOA=$(dig +short SOA $DOMAIN) 
	
	if [ -z "$SOA" ]
	then
		echo dns zone not found, please create the domain name $DOMAIN of remove it from db if not possible
		return 1
	fi

	echo "check MX (should be something like: <num> <docker-host>)"
	TEST=$(dig +short MX $DOMAIN)
	echo $TEST
	HOST=$(echo $TEST | head -n 1 | awk '{print $2}')
	# 1 mx.enor.me.
	echo 'quit'  | nc -q 1 $HOST 25
	echo

	echo "check submission SRV helper (should be something like: <num> <num> 587 <docker-host>)"
	TEST=$(dig +short SRV _submission._tcp.$DOMAIN)
	# 0 0 587 c.enor.me.
	echo $TEST
	HOST=$(echo $TEST | head -n 1 | awk '{print $4}')
	PORT=$(echo $TEST | head -n 1 | awk '{print $3}')
	if [ ! $PORT -eq 587 ] 
	then
		echo "ko - wrong port $PORT, expected 587"
	else
		echo "ok - correct submission port"
	fi
	echo 'quit'  | nc -q 1 $HOST 587
	echo

	echo "check imap SRV helper (should be something like: <num> <num> 143 <docker-host>)"
	TEST=$(dig +short SRV _imap._tcp.$DOMAIN)
	# 0 0 143 c.enor.me.
	echo $TEST
	HOST=$(echo $TEST | head -n 1 | awk '{print $4}')
	PORT=$(echo $TEST | head -n 1 | awk '{print $3}')
	if [ ! $PORT -eq 143 ] 
	then
		echo "ko - wrong port $PORT, expected 143"
	else
		echo "ok - correct imap port"
	fi
	echo 'a001 logout'  | nc -q 1 $HOST $PORT
	echo
	
	echo "check sieve (port 4190)"
	echo 'logout'  | nc -q 1 $HOST 4190
	echo

	echo check SPF1 '(should be something like: "(v=spf1 mx ip4:<docker-host-ip> -all)"'
	SPF=$(dig +short TXT $DOMAIN | grep '^"v=spf1')
	# "v=spf1 mx ip4:178.33.231.79 -all"	
	echo $SPF
	if [[ $SPF =~ -all\"$ ]]
	then
		echo "ok - SPF is strict (ending with -all)"
	else
		echo "ko - SPF is not found or not strict (must end with -all)"
	fi
	echo

	SELECTOR=$(dkim-get-selector $DOMAIN)

	echo check DKIM entry	
	if opendkim-testkey -d $DOMAIN -s $SELECTOR 
	then
		echo ok - dkim key for selector $SELECTOR found and correct 
	else
		echo ko - missing dkim key, please add:
		cat /etc/opendkim/keys/$DOMAIN/$SELECTOR.txt
	fi
	echo
}

gen-password()
{
	tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' </dev/urandom | head -c${1:-12}; echo ""
}

user-list()
{
	awk '{print $1}' < /etc/postfix/virtual-mailbox-maps
}

user-add()
{
	EMAIL=$1
	PASSWORD=$2

	USER=${EMAIL%*@}
	DOMAIN=${EMAIL#*@}

	AUTOPASS=0

	if ! grep -q "^$DOMAIN$" /etc/postfix/virtual-mailbox-domains
	then
		echo $DOMAIN unknwon, please use before: $0 domain-add $DOMAIN >&2
		exit 1
	fi

	if postmap -q $EMAIL /etc/postfix/virtual-mailbox-maps >/dev/null
	then
		echo $EMAIL already exists
		exit 1
	fi

	if [ -z "$PASSWORD" ]
	then
		# random password
		PASSWORD=$(gen-password)
		AUTOPASS=1
	fi

	# add credential
	# TODO: change method to non PLAIN 
	# TODO: should avoid linear text file
	echo "$EMAIL:{PLAIN}$PASSWORD" >> /etc/dovecot/passwd

	echo $EMAIL $DOMAIN/$USER/ >>/etc/postfix/virtual-mailbox-maps
	postmap /etc/postfix/virtual-mailbox-maps

	echo $EMAIL $EMAIL >>/etc/postfix/virtual-sender-login-maps
	postmap /etc/postfix/virtual-sender-login-maps

	if [ $AUTOPASS == 1 ]
	then
		echo $EMAIL added with password $PASSWORD
	else
		echo $EMAIL added
	fi
}

user-del()
{
	EMAIL=$1

	USER=${EMAIL%*@}
	DOMAIN=${EMAIL#*@}

	AUTOPASS=0

	if ! postmap -q $EMAIL /etc/postfix/virtual-mailbox-maps >/dev/null
	then
		echo $EMAIL not found >&2
		exit 1
	fi

	grep -v "^$EMAIL:" /etc/dovecot/passwd > /etc/dovecot/passwd.tmp
	mv /etc/dovecot/passwd.tmp /etc/dovecot/passwd

	for F in /etc/postfix/virtual-mailbox-maps /etc/postfix/virtual-sender-login-maps
	do
		grep -v "^$EMAIL " $F > $F.tmp
		mv $F.tmp $F
		postmap $F
	done 

	echo "$EMAIL deleted (data kept)"
}

user-password()
{
	EMAIL=$1
	PASSWORD=$2

	USER=${EMAIL%*@}
	DOMAIN=${EMAIL#*@}

	AUTOPASS=0

	if ! postmap -q $EMAIL /etc/postfix/virtual-mailbox-maps >/dev/null
	then
		echo $EMAIL not found >&2
		exit 1
	fi

	if [ -z "$PASSWORD" ]
	then
		# random password
		PASSWORD=$(gen-password)
		AUTOPASS=1
	fi

	# add credential
	# TODO: change method to non PLAIN 
	# TODO: should avoid linear text file
	grep -v "^$EMAIL:" /etc/dovecot/passwd > /etc/dovecot/passwd.tmp
	echo "$EMAIL:{PLAIN}$PASSWORD" >> /etc/dovecot/passwd.tmp
	mv /etc/dovecot/passwd.tmp /etc/dovecot/passwd
	

	if [ $AUTOPASS == 1 ]
	then
		echo $EMAIL new password generated: $PASSWORD
	else
		echo $EMAIL password changed
	fi
}



remap()
{
	postmap /etc/postfix/virtual-mailbox-maps
	postmap /etc/postfix/virtual-sender-login-maps
}

status()
{
  service cron status
  service dovecot status
  service spamassassin status
  service opendkim status
  service postfix status
  service rsyslog status
}

VERB=$1
shift

case $VERB in
	domain-list|user-list|remap|status)
	# no param
		$VERB
		;;

	# 1 domain param
	domain-add|domain-del|domain-check|dkim-get-selector)
		DOMAIN=$1
		test -z "$DOMAIN" && echo usage $0 $VERB '<domain>' >&2 && exit 1
		$VERB $DOMAIN
		;;

	user-add|user-del|user-password)
		EMAIL=$1
		test -z "$EMAIL" && echo usage $0 $VERB '<email>' >&2 && exit 1
		$VERB $EMAIL
		;;

	*)
		usage
		;;

esac


